<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 配置自动扫面的包 -->
	<context:component-scan base-package="com.xiang.spring.hibernate"></context:component-scan>

	<!-- 配置数据源 -->
	<!-- 导入数据源配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候, 就把该连接重新放到数据池中,方便下次使用调用 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<!-- 设置连接池初始值 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>

	<!-- 配置 Hibernate 的 SessionFactory 实例: 通过 LocalSessionFactoryBean 进行配置 -->
	<bean id="sessionFactoty"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置数据源 -->
		<!-- <property name="dataSource" ref="dataSource"></property> -->
		<!-- 配置 Hibernate 配置文件的位置及名称 -->
		<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml"></property> -->
		<!-- 配置 Hibernate 映射文件的位置及名称，可以使用通配符 -->
		<!-- <property name="mappingLocations" value="classpath:com/xiang/spring/hibernate/entity/*.hbm.xml"></property> -->

		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />

		<!-- hibernate的相关属性配置 -->
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
				<!-- 设置自动创建 create|更新 update|验证数据库表结构 -->
				hibernate.hbm2ddl.auto=update
				<!-- 是否在控制台显示sql -->
				hibernate.show_sql=true
				<!-- 是否格式化sql，优化显示 -->
				hibernate.format_sql=true
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=false
				<!-- 数据库批量查询最大数 -->
				hibernate.jdbc.fetch_size=50
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				hibernate.jdbc.batch_size=50
				<!-- 是否自动提交事务 -->
				hibernate.connection.autocommit=true
				<!-- 指定hibernate在何时释放JDBC连接 -->
				hibernate.connection.release_mode=auto
				<!-- 创建session方式 hibernate4.x 的方式 -->
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
				
				hibernate.jdbc.lob.non_contextual_creation=true
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
					所以把它设置为none即可 -->
				javax.persistence.validation.mode=none
			</value>
		</property>
		<!-- 自动扫描实体对象 hibernnate.entity的包结构中存放实体类 -->
		<!-- <property name="packagesToScan" value="com.xiang.spring.hibernate.entity" /> -->
		<!-- 配置 Hibernate 映射文件的位置及名称，可以使用通配符 -->
		<property name="mappingLocations" value="classpath:com/xiang/spring/hibernate/entity/*.hbm.xml"></property>
	</bean>

	<!-- 配置 Spring 的声明式事务 -->
	<!-- 1. 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactoty"></property>
	</bean>

	<!-- 2. 配置事务属性，需要要事务管理器
		 事务执行方式
        REQUIRED：指定当前方法必需在事务环境中运行，
                如果当前有事务环境就加入当前正在执行的事务环境，
                如果当前没有事务，就新建一个事务。
                这是默认值。 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>

	<!-- 3. 配置事务切点，并把切点和事务属相关联起来 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* com.xiang.spring.hibernate.service.*.*(..))"
			id="txPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

</beans>
